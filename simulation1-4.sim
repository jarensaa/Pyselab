begin
  external class demos="./demos.atr";
  demos
  begin

    real  METER_TO_BASE_STATION_PACKETLOSS_PROBABILITY,
          METER_TO_BASE_STATION_TIME_DELAY,
          SERVER_FAILURE_INTENSITY,
          CONTROLLER_FAILURE_INTENSITY;


    ref(RDist)    delayFromBaseStationToController_,
                  dataProcessingTimeInController_,
                  dataProcessingTimeInServer_,
                  serverRestartTime_,
                  serverSwitchoverTime_,
                  controllerRestartTime_,
                  randomNumberGenerator_,
                  timeBetweenPacketsFromMeter_;

    ref(BDist)    ServerLoadBalancing_;

    ref(Res)      controller_;

    ref(Bin)	    mybin_;

    ref(WaitQ)    ServerQueue1_,
                  ServerQueue2_,
                  ServerQueue3_,
                  ServerQueue4_;

    ref(Tally)  totalTransferTime_,
                measuredDelayFromMeterToBaseStation_;

    ref(Count)  lostPackets_,
                recievedPackets_;

    !declare the simulation logging variables;
    integer sentPackets,  droppedPackets, packetNumber;



    Entity class SmartMeter;
    begin
      real time;
      !smart meter events goes here;
      loop:
        time := timeBetweenPacketsFromMeter_.sample;
        hold(time);
        new Packet("packet").schedule(now);
        repeat;
    end;

    Entity class Packet;
    begin

      !Set timestamp for packet generation;
      long real timestamp;
      timestamp := time;

      !packet goes from meter to BS, check for packet loss;
      hold(METER_TO_BASE_STATION_TIME_DELAY);

      if randomNumberGenerator_.sample <= METER_TO_BASE_STATION_PACKETLOSS_PROBABILITY then begin
        lostPackets_.update(1);
        goto disconnection;
      end;

      !packet is sent from BS to Controller;
      hold(delayFromBaseStationToController_.sample);

      !packet is queued in controller;

      controller_.acquire(1);
      hold(dataProcessingTimeInController_.sample);
      controller_.release(1);

      !packet is load balanced to Server1 or 2;
      if ServerLoadBalancing_.sample then 
        begin
          if ServerLoadBalancing_.sample then ServerQueue1_.wait
          else ServerQueue2_.wait;
        end
      else 
        begin
          if ServerLoadBalancing_.sample then ServerQueue3_.wait
          else ServerQueue4_.wait;
        end;


      totalTransferTime_.update(time-timestamp);
      recievedPackets_.update(1);


      disconnection:
      	mybin_.give(1);


    end;

    Entity class Server(ServerQueue_);
    ref(WaitQ) ServerQueue_;
    begin
      ref(Packet) packet_;
      loop:
        packet_ :- ServerQueue_.coopt;
        hold(dataProcessingTimeInServer_.sample);
        packet_.schedule(now);
        repeat;
    end;


    !Initiate all the variables/constants/tallys and stuff.
    Then, make som objects,
    Then, run the program;

    METER_TO_BASE_STATION_TIME_DELAY := 0.110;
    METER_TO_BASE_STATION_PACKETLOSS_PROBABILITY := 0.05;


    timeBetweenPacketsFromMeter_ :- new NegExp("metertime",20);
    randomNumberGenerator_ :- new Uniform("numbergenerator",0,1);
    delayFromBaseStationToController_ :- new NegExp("BS-Controler",1/0.02);
    dataProcessingTimeInController_ :- new NegExp("controller",1/0.0001);
    dataProcessingTimeInServer_ :- new NegExp("server",1/0.002);

    ServerQueue1_ :- new WaitQ("server1");
    ServerQueue2_ :- new WaitQ("server2");
    ServerQueue3_ :- new WaitQ("server3");
    ServerQueue4_ :- new WaitQ("server4");

    ServerLoadBalancing_ :- new Draw("server balance", 0.5);

    controller_ :- new Res("controller",1);

    measuredDelayFromMeterToBaseStation_ :- new Tally("meterdelay");
    totalTransferTime_ :- new Tally("totalTime");

    lostPackets_ :- new Count("lostPackets");
    recievedPackets_ :- new Count("recieved");
    mybin_ :- new Bin("mybin", 0);

    new Server("server1",ServerQueue1_).schedule(0);
    new Server("server2",ServerQueue2_).schedule(0);
    new Server("server3",ServerQueue3_).schedule(0);
    new Server("server4",ServerQueue4_).schedule(0);
    
    new SmartMeter("Meter 1").schedule(0);
    mybin_.take(100000);

  end;
end;
