begin
  external class demos="./demos.atr";
  demos
  begin

    real          METER_TO_BASE_STATION_PACKETLOSS_PROBABILITY,
                  METER_TO_BASE_STATION_TIME_DELAY,
                  AVARAGE_BASE_STATION_TO_CONTROLLER_DELAY,
                  AVARAGE_CONTROLLER_PROCESSING_TIME,
                  AVARAGE_SERVER_PROCESSING_TIME,
                  PACKETS_PER_SECOND_FROM_METER,
                  NUMBER_OF_METERS,
                  SERVER_FAILURE_INTENSITY,
                  SERVER_RESTART_TIME,
                  SERVER_SWITCHOVER_TIME,
                  CONTROLLER_FAILURE_INTENSITY,
                  CONTROLLER_RESTART_TIME,
                  NUMBER_OF_ACTIVE_SERVERS,
                  NUMBER_OF_TOTAL_SERVERS,
                  PACKETS_TO_SIMULATE,
                  SIMULATION_TIME,
                  elhubDowntime;

    ref(RDist)    delayFromBaseStationToController_,
                  dataProcessingTimeInController_,
                  dataProcessingTimeInServer_,
                  randomNumberGenerator_,
                  timeBetweenPacketsFromMeter_,
                  serverRestartTime_,
                  serverSwitchoverTime_,
                  controllerRestartTime_;

    ref(Res)      controller_,
                  activeServer_;

    ref(Bin)	    runtimeBin_;

    ref(WaitQ)    ServerQueue_;

    ref(CondQ)    FailureMonitor_;

    ref(Tally)    totalTransferTime_,
                  elhubDownTime_;

    ref(Count)    lostPackets_,
                  recievedPackets_,
                  fastEnoughPackets_,
                  tooSlowPackets_,
                  testCounter_,
                  serverRestarts_,
                  serverCount1_,
                  serverCount2_,
                  serverCount3_,
                  elhubDowntimeCount_;

    integer       numberOfAvailableActiveServerSlots;

    boolean       controllerIsBroken,
                  server1IsBroken,
                  server2IsBroken,
                  server3IsBroken;

    Entity class SmartMeter;
    begin
      real time;
      !smart meter events goes here;
      loop:
        time := timeBetweenPacketsFromMeter_.sample;
        hold(time);
        new Packet("packet").schedule(now);
        repeat;
    end;


    Entity class Packet;
    begin
      !Set timestamp for packet generation;
      long real timestamp;
      timestamp := time;

      priority := 1;

      !packet goes from meter to BS, check for packet loss;
      hold(METER_TO_BASE_STATION_TIME_DELAY);

      if randomNumberGenerator_.sample <= METER_TO_BASE_STATION_PACKETLOSS_PROBABILITY then begin
        lostPackets_.update(1);
        goto disconnection;
      end;

      !packet is sent from BS to Controller;
      hold(delayFromBaseStationToController_.sample);

      !packet is queued in controller;

      controller_.acquire(1);
      hold(dataProcessingTimeInController_.sample);
      controller_.release(1);

      ServerQueue_.wait;

      totalTransferTime_.update(time-timestamp);
      recievedPackets_.update(1);
      if time-timestamp < 0.2 then fastEnoughPackets_.update(1)
      else tooSlowPackets_.update(1);

      disconnection:
      	runtimeBin_.give(1);
    end;


    Entity class Server(ServerCount_, serverIsBroken);
    ref(Count) ServerCount_;
    boolean serverIsBroken;
    begin
      ref(Packet) packet_;
      ref(ServerFailure) serverFailure_;

      serverFailure_ :- new ServerFailure("failure",this Server,serverIsBroken);
      serverFailure_.schedule(now);


      passiveActiveSwitch:
        if numberOfAvailableActiveServerSlots < 1 then hold(SIMULATION_TIME);
          if interrupted>0 then
            begin
              goto broken;
            end;
          hold(serverSwitchoverTime_.sample);
          numberOfAvailableActiveServerSlots := numberOfAvailableActiveServerSlots - 1;

      active:
        loop:
        
          if ServerQueue_.LENGTH = 0 and interrupted = 0 then hold(SIMULATION_TIME);

          if interrupted>0 then
          begin
            numberOfAvailableActiveServerSlots := numberOfAvailableActiveServerSlots + 1;
            goto broken;
          end;

          ServerCount_.update(1);
          packet_ :- ServerQueue_.coopt;
          hold(dataProcessingTimeInServer_.sample);
          packet_.schedule(now);
          repeat;

      broken:
        if interrupted>0 then hold(SIMULATION_TIME);
        serverRestarts_.update(1);
        goto passiveActiveSwitch;

    end;

    Entity class ServerFailure(server_,serverIsBroken);
    ref(Server) server_;
    boolean serverIsBroken;
    begin
      priority := 3;
      loop:
        hold(1/SERVER_FAILURE_INTENSITY);

        server_.interrupt(1);
        serverIsBroken := true;
        FailureMonitor_.signal;

        hold(serverRestartTime_.sample);

        serverIsBroken := false;
        server_.interrupt(0);
        FailureMonitor_.signal;


        repeat;
    end;

    Entity class ControllerFailure();
    begin
      loop:
        hold(1/CONTROLLER_FAILURE_INTENSITY);

        controller_.acquire(1);
        controllerIsBroken := true;
        FailureMonitor_.signal;

        hold(controllerRestartTime_.sample);

        controllerIsBroken := false;
        FailureMonitor_.signal;
        controller_.release(1);

        repeat;
    end;

    Entity class ELHUBmonitor;
    begin
      long real timestamp;
      loop:
        FailureMonitor_.waituntil(controllerIsBroken or numberOfAvailableActiveServerSlots = 2);
        timestamp := time;

        FailureMonitor_.waituntil(not controllerIsBroken and numberOfAvailableActiveServerSlots < 2);
        elhubDowntime := elhubdowntime + (time - timestamp);
        elhubDowntimeCount_.update(1);
        elhubDownTime_.update(time-timestamp);
        repeat;
    end;


    METER_TO_BASE_STATION_PACKETLOSS_PROBABILITY := 0.05;
    METER_TO_BASE_STATION_TIME_DELAY := 0.110;
    AVARAGE_BASE_STATION_TO_CONTROLLER_DELAY := 0.02;
    AVARAGE_CONTROLLER_PROCESSING_TIME := 0.0001;
    AVARAGE_SERVER_PROCESSING_TIME := 0.002;

    SERVER_FAILURE_INTENSITY := 10;
    SERVER_RESTART_TIME := 0.001;
    SERVER_SWITCHOVER_TIME := 0.005;
    CONTROLLER_FAILURE_INTENSITY := 10;
    CONTROLLER_RESTART_TIME := 0.002;

    NUMBER_OF_ACTIVE_SERVERS := 2;
    NUMBER_OF_TOTAL_SERVERS := 2;

    PACKETS_PER_SECOND_FROM_METER := 0.1;
    NUMBER_OF_METERS := 1000;
    PACKETS_TO_SIMULATE := 10000;
    SIMULATION_TIME := 1000;

    elhubDowntime := 0;
    numberOfAvailableActiveServerSlots := 2;

    controllerIsBroken := false;
    server1IsBroken := false;
    server2IsBroken := false;
    server3IsBroken := false;

    timeBetweenPacketsFromMeter_ :- new NegExp("metertime",PACKETS_PER_SECOND_FROM_METER * NUMBER_OF_METERS);
    randomNumberGenerator_ :- new Uniform("numbergenerator",0,1);
    delayFromBaseStationToController_ :- new NegExp("BS-Controler",1/AVARAGE_BASE_STATION_TO_CONTROLLER_DELAY);
    dataProcessingTimeInController_ :- new NegExp("controller",1/AVARAGE_CONTROLLER_PROCESSING_TIME);
    dataProcessingTimeInServer_ :- new NegExp("server",1/AVARAGE_SERVER_PROCESSING_TIME);

    serverRestartTime_ :- new NegExp("serverRestart",1/SERVER_RESTART_TIME);
    serverSwitchoverTime_ :- new NegExp("serverSwitchover",1/SERVER_SWITCHOVER_TIME);
    controllerRestartTime_ :- new NegExp("controllerRestart",1/CONTROLLER_RESTART_TIME);

    ServerQueue_ :- new WaitQ("ServerQueue");
    FailureMonitor_ :- new CondQ("failureMonitorQ");

    lostPackets_ :-       new Count("lostPackets");
    recievedPackets_ :-   new Count("recieved");
    fastEnoughPackets_ :- new Count("fast packets");
    tooSlowPackets_ :-    new Count("slow packets");
    serverRestarts_ :-    new Count("broken");
    serverCount1_   :-    new Count("server1");
    serverCount2_   :-    new Count("server2");
    serverCount3_   :-    new Count("server3");
    elhubDowntimeCount_ :-new Count("elhubdowntime");

    totalTransferTime_ :- new Tally("totalTime");
    elhubDownTime_     :- new Tally("elhubDown");

    runtimeBin_ :-   new Bin("runtimeBin", 0);

    controller_ :-   new Res("controller",1);
    activeServer_ :- new Res("activeServer",NUMBER_OF_ACTIVE_SERVERS);

    new Server("server1",serverCount1_,server1IsBroken).schedule(0);
    new Server("server2",serverCount2_,server2IsBroken).schedule(0);
    new Server("server3",serverCount3_,server3IsBroken).schedule(0);

    new ControllerFailure("controllerFailure").schedule(0);
    new ELHUBmonitor("monitor").schedule(0);

    new SmartMeter("Meter 1").schedule(0);

    hold(SIMULATION_TIME);

    outreal(elhubDowntime,3,10); outimage;

  end;
end;
