begin
  external class demos="./demos.atr";
  demos
  begin

  ! *******************************************************
    ******************** DECLARATIONS *********************
    ******************************************************* ;

    real          SERVER_FAILURE_INTENSITY,
                  SERVER_RESTART_INTENSITY,
                  SERVER_SWITCHOVER_INTENSITY,
                  CONTROLLER_FAILURE_INTENSITY,
                  CONTROLLER_RESTART_INTENSITY,
                  NUMBER_OF_ACTIVE_SERVER_SLOTS,
                  SIMULATION_TIME,
                  elhubDowntime,
                  serverDownTime,
                  controllerDownTime;

    ref(RDist)    serverRestartTime_,
                  serverSwitchoverTime_,
                  controllerRestartTime_,
                  serverFailureTime_,
                  controllerFailureTime_;


    ref(CondQ)    elhubMonitor_,
                  serverMonitor_,
                  controllerMonitor_,
                  serverWaitQ_;


    ref(Count)    serverRestarts_,
                  elhubDowntimeCount_,
                  serverDownTimeCount_,
                  controllerDownTimeCount_;

    ref(Tally)    averageRestartToActiveTime_;

    integer       numberOfAvailableActiveServerSlots,
                  numberOfActiveServers,
                  brokenServers;

    boolean       controllerIsBroken;


    ! *******************************************************
      ********************** ENTITIES ***********************
      ******************************************************* ;

      Entity class Server(priority_);
      integer priority_;
      begin
        ref(ServerFailure) serverFailure_;
        serverFailure_ :- new ServerFailure("failure",this Server);
        serverFailure_.schedule(now);

        priority := 2;

        passive:
          serverWaitQ_.waituntil(numberOfAvailableActiveServerSlots > 0 or interrupted = 1);
          if interrupted = 1 then goto broken;

        switchover:
          numberOfAvailableActiveServerSlots := numberOfAvailableActiveServerSlots - 1;
          !hold(serverSwitchoverTime_.sample);
          numberOfActiveServers := numberOfActiveServers + 1;
          serverMonitor_.signal;

        active:
          serverWaitQ_.waituntil(interrupted = 1);
          if interrupted = 1 then goto activeServerBroken;
          goto endpoint;


        activeServerBroken:
          numberOfAvailableActiveServerSlots := numberOfAvailableActiveServerSlots + 1;
          numberOfActiveServers := numberOfActiveServers - 1;
          goto broken;

        broken:
          brokenServers := brokenServers + 1;
          serverMonitor_.signal;
          serverWaitQ_.signal;

          serverWaitQ_.waituntil(interrupted = 0);
          brokenServers := brokenServers - 1;
          goto passive;

        endpoint:
        !theoretically unreachable;

    end;
    ! *******************************************************
      ********************** FAILURES ***********************
      ******************************************************* ;

    Entity class ServerFailure(server_);
    ref(Server) server_;

    begin
      real timestamp;
      priority := 3;
      loop:

        hold(serverFailureTime_.sample);

        timestamp := time;
        server_.interrupt(1);
        serverWaitQ_.signal;

        hold(serverRestartTime_.sample);

        serverRestarts_.update(1);
        server_.interrupt(0);
        serverWaitQ_.signal;

        repeat;
    end;

    Entity class ControllerFailure();
    begin
      priority := 3;
      loop:
        hold(controllerFailureTime_.sample);

        controllerIsBroken := true;
        controllerMonitor_.signal;

        hold(controllerRestartTime_.sample);

        controllerIsBroken := false;
        controllerMonitor_.signal;

        repeat;
    end;


    ! *******************************************************
      ********************** MONITORS ***********************
      ******************************************************* ;

    Entity class ELHUBmonitor;
    begin
      long real elhubTimestamp;
      priority := 1;
      loop:
        elhubMonitor_.waituntil(controllerIsBroken or numberOfActiveServers = 0);
        elhubtimestamp := time;

        elhubMonitor_.waituntil(not controllerIsBroken and numberOfActiveServers > 0);

        elhubDowntime := elhubdowntime + (time - elhubtimestamp);
        elhubDowntimeCount_.update(1);

        repeat;
    end;

    Entity class Servermonitor;
    begin
      real serverTimestamp;
      priority := 1;
      loop:
        serverMonitor_.waituntil(numberOfActiveServers = 0);
        serverTimestamp := time;
        elhubMonitor_.signal;


        serverMonitor_.waituntil(numberOfActiveServers > 0);


        serverDownTime := serverDownTime + (time - serverTimestamp);


        serverDownTimeCount_.update(1);
        elhubMonitor_.signal;

        repeat;
    end;

    Entity class ControllerMonitor;
    begin
      long real controllerTimestamp;
      priority := 1;
      loop:
        controllerMonitor_.waituntil(controllerIsBroken);
        controllerTimestamp := time;
        elhubMonitor_.signal;

        controllerMonitor_.waituntil(not controllerIsBroken);

        controllerDownTime := controllerDownTime + (time - controllerTimestamp);
        controllerDownTimeCount_.update(1);
        elhubMonitor_.signal;

        repeat;
    end;


    ! *******************************************************
      ********************** CONSTANTS **********************
      ******************************************************* ;

    SERVER_FAILURE_INTENSITY     := 0.01;
    SERVER_RESTART_INTENSITY     := 1;
    CONTROLLER_FAILURE_INTENSITY := 0.01;
    CONTROLLER_RESTART_INTENSITY := 2;
    SERVER_SWITCHOVER_INTENSITY  := 5;

    NUMBER_OF_ACTIVE_SERVER_SLOTS := 1;
    SIMULATION_TIME := 10000000;


    ! *******************************************************
      ********************** VARIABLES **********************
      ******************************************************* ;

    elhubDowntime       := 0;
    serverDownTime      := 0;
    controllerDownTime  := 0;
    brokenServers := 0;

    numberOfActiveServers := 0;
    numberOfAvailableActiveServerSlots := NUMBER_OF_ACTIVE_SERVER_SLOTS;

    controllerIsBroken := false;


    ! *******************************************************
      ******************* OBJECT INITS **********************
      ******************************************************* ;

    serverFailureTime_ :- new NegExp("serverFailureTime",SERVER_FAILURE_INTENSITY);
    serverRestartTime_ :- new NegExp("serverRestart",SERVER_RESTART_INTENSITY);
    controllerRestartTime_ :- new NegExp("controllerRestart",CONTROLLER_RESTART_INTENSITY);
    controllerFailureTime_ :- new NegExp("controllerFailureTime",CONTROLLER_FAILURE_INTENSITY);
    serverSwitchoverTime_ :- new NegExp("serverSwitchover",SERVER_SWITCHOVER_INTENSITY);

    elhubMonitor_       :- new CondQ("elhubCondQ");
    serverMonitor_      :- new CondQ("serverCondQ");
    controllerMonitor_  :- new CondQ("contrCondQ");
    serverWaitQ_        :- new CondQ("serverQ");

    serverRestarts_ :-          new Count("broken");
    elhubDowntimeCount_ :-      new Count("elhubdown");
    serverDownTimeCount_:-      new Count("serverDown");
    controllerDownTimeCount_ :- new Count("controllerDown");

     averageRestartToActiveTime_ :- new Tally("broken -> active");


    ! *******************************************************
      ******************* MAIN PROGRAM **********************
      ******************************************************* ;

    new Server("server1",7).schedule(0);
    new Server("server2",7).schedule(0);
    new Server("server3",7).schedule(0);

    new ControllerFailure("controllerFailure").schedule(0);

    new ELHUBmonitor("monitor").schedule(0);
    new Servermonitor("server").schedule(0);
    new ControllerMonitor("controller").schedule(0);

    hold(SIMULATION_TIME);


    ! *******************************************************
      ************************ OUTPUT ***********************
      ******************************************************* ;

    outtext("elhub  unavailability:       "); outreal(elhubDowntime/SIMULATION_TIME,4,10); outimage;
    outtext("server  unavailability:      "); outreal(serverDownTime/SIMULATION_TIME,4,10); outimage;
    outtext("controller  unavailability:  "); outreal(controllerDowntime/SIMULATION_TIME,4,10); outimage;

  end;
end;
